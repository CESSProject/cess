
//! Autogenerated weights for pallet_file_bank
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ytqaljn-virtual-machine`, CPU: `12th Gen Intel(R) Core(TM) i5-12400`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("cess-initial-testnet"), DB CACHE: 1024

// Executed Command:
// ./target/release/cess-node
// benchmark
// pallet
// --chain
// cess-initial-testnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_file_bank
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/file-bank/src/temp_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_file_bank.
pub trait WeightInfo {
	fn cert_idle_space() -> Weight;
}

/// Weights for pallet_file_bank using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `TeeWorker::Workers` (r:1 w:0)
	// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TeeWorker::LastWork` (r:1 w:1)
	// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sminer::MinerItems` (r:1 w:1)
	// Proof: `Sminer::MinerItems` (`max_values`: None, `max_size`: Some(203179), added: 205654, mode: `MaxEncodedLen`)
	// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `StorageHandler::TotalIdleSpace` (r:1 w:1)
	// Proof: `StorageHandler::TotalIdleSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn cert_idle_space() -> Weight {
		// Minimum execution time: 100_901 nanoseconds.
		Weight::from_parts(129_280_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `TeeWorker::Workers` (r:1 w:0)
	// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `TeeWorker::LastWork` (r:1 w:1)
	// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Sminer::MinerItems` (r:1 w:1)
	// Proof: `Sminer::MinerItems` (`max_values`: None, `max_size`: Some(203179), added: 205654, mode: `MaxEncodedLen`)
	// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	// Storage: `StorageHandler::TotalIdleSpace` (r:1 w:1)
	// Proof: `StorageHandler::TotalIdleSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn cert_idle_space() -> Weight {
		// Minimum execution time: 100_901 nanoseconds.
		Weight::from_parts(129_280_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}


//! Autogenerated weights for `pallet_storage_handler`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ytqaljn-virtual-machine`, CPU: `12th Gen Intel(R) Core(TM) i5-12400`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("cess-initial-devnet")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cess-node
// benchmark
// pallet
// --chain
// cess-initial-devnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_storage_handler
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/storage-handler/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_storage_handler`.
pub trait WeightInfo {
	fn buy_space() -> Weight;
	fn expansion_space() -> Weight;
	fn renewal_space() -> Weight;
	fn create_order() -> Weight;
	fn exec_order() -> Weight;
}

/// Weights for `pallet_storage_handler` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UnitPrice` (r:1 w:0)
	/// Proof: `StorageHandler::UnitPrice` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::PurchasedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::PurchasedSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalIdleSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalIdleSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalServiceSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalServiceSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn buy_space() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `330`
		//  Estimated: `6196`
		// Minimum execution time: 65_702_000 picoseconds.
		Weight::from_parts(67_198_000, 6196)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UnitPrice` (r:1 w:0)
	/// Proof: `StorageHandler::UnitPrice` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::PurchasedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::PurchasedSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalIdleSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalIdleSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalServiceSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalServiceSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn expansion_space() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `620`
		//  Estimated: `6196`
		// Minimum execution time: 64_474_000 picoseconds.
		Weight::from_parts(66_723_000, 6196)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UnitPrice` (r:1 w:0)
	/// Proof: `StorageHandler::UnitPrice` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn renewal_space() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `615`
		//  Estimated: `6196`
		// Minimum execution time: 57_114_000 picoseconds.
		Weight::from_parts(58_743_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:0)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UnitPrice` (r:1 w:0)
	/// Proof: `StorageHandler::UnitPrice` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Babe::AuthorVrfRandomness` (r:1 w:0)
	/// Proof: `Babe::AuthorVrfRandomness` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::PayOrder` (r:0 w:1)
	/// Proof: `StorageHandler::PayOrder` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	fn create_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `497`
		//  Estimated: `3606`
		// Minimum execution time: 21_731_000 picoseconds.
		Weight::from_parts(22_921_000, 3606)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `StorageHandler::PayOrder` (r:1 w:0)
	/// Proof: `StorageHandler::PayOrder` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::PurchasedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::PurchasedSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalIdleSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalIdleSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalServiceSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalServiceSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn exec_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462`
		//  Estimated: `6196`
		// Minimum execution time: 67_037_000 picoseconds.
		Weight::from_parts(91_637_000, 6196)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UnitPrice` (r:1 w:0)
	/// Proof: `StorageHandler::UnitPrice` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::PurchasedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::PurchasedSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalIdleSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalIdleSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalServiceSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalServiceSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn buy_space() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `330`
		//  Estimated: `6196`
		// Minimum execution time: 65_702_000 picoseconds.
		Weight::from_parts(67_198_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UnitPrice` (r:1 w:0)
	/// Proof: `StorageHandler::UnitPrice` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::PurchasedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::PurchasedSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalIdleSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalIdleSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalServiceSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalServiceSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn expansion_space() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `620`
		//  Estimated: `6196`
		// Minimum execution time: 64_474_000 picoseconds.
		Weight::from_parts(66_723_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UnitPrice` (r:1 w:0)
	/// Proof: `StorageHandler::UnitPrice` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn renewal_space() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `615`
		//  Estimated: `6196`
		// Minimum execution time: 57_114_000 picoseconds.
		Weight::from_parts(58_743_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:0)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UnitPrice` (r:1 w:0)
	/// Proof: `StorageHandler::UnitPrice` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Babe::AuthorVrfRandomness` (r:1 w:0)
	/// Proof: `Babe::AuthorVrfRandomness` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::PayOrder` (r:0 w:1)
	/// Proof: `StorageHandler::PayOrder` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	fn create_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `497`
		//  Estimated: `3606`
		// Minimum execution time: 21_731_000 picoseconds.
		Weight::from_parts(22_921_000, 3606)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `StorageHandler::PayOrder` (r:1 w:0)
	/// Proof: `StorageHandler::PayOrder` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::UserOwnedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::UserOwnedSpace` (`max_values`: None, `max_size`: Some(141), added: 2616, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::PurchasedSpace` (r:1 w:1)
	/// Proof: `StorageHandler::PurchasedSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalIdleSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalIdleSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `StorageHandler::TotalServiceSpace` (r:1 w:0)
	/// Proof: `StorageHandler::TotalServiceSpace` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn exec_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462`
		//  Estimated: `6196`
		// Minimum execution time: 67_037_000 picoseconds.
		Weight::from_parts(91_637_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}

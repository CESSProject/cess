
//! Autogenerated weights for `pallet_audit`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ytqaljn-virtual-machine`, CPU: `12th Gen Intel(R) Core(TM) i5-12400`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("cess-initial-testnet")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cess-node
// benchmark
// pallet
// --chain
// cess-initial-testnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_audit
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/audit/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_audit`.
pub trait WeightInfo {
	fn submit_idle_proof() -> Weight;
	fn submit_service_proof() -> Weight;
	fn submit_verify_idle_result() -> Weight;
	fn submit_verify_service_result() -> Weight;
	fn submit_verify_idle_result_reward() -> Weight;
	fn submit_verify_service_result_reward() -> Weight;
}

/// Weights for `pallet_audit` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::ValidationTypeList` (r:1 w:0)
	/// Proof: `TeeWorker::ValidationTypeList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::AuthorVrfRandomness` (r:1 w:0)
	/// Proof: `Babe::AuthorVrfRandomness` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn submit_idle_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4930`
		//  Estimated: `33512`
		// Minimum execution time: 45_539_000 picoseconds.
		Weight::from_parts(87_906_000, 33512)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::ValidationTypeList` (r:1 w:0)
	/// Proof: `TeeWorker::ValidationTypeList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::AuthorVrfRandomness` (r:1 w:0)
	/// Proof: `Babe::AuthorVrfRandomness` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn submit_service_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4930`
		//  Estimated: `33512`
		// Minimum execution time: 51_521_000 picoseconds.
		Weight::from_parts(92_788_000, 33512)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn submit_verify_idle_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5040`
		//  Estimated: `33512`
		// Minimum execution time: 94_299_000 picoseconds.
		Weight::from_parts(147_249_000, 33512)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Audit::CountedServiceFailed` (r:0 w:1)
	/// Proof: `Audit::CountedServiceFailed` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn submit_verify_service_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7024`
		//  Estimated: `33512`
		// Minimum execution time: 110_690_000 picoseconds.
		Weight::from_parts(188_559_000, 33512)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Sminer::CompleteMinerSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteMinerSnapShot` (`max_values`: None, `max_size`: Some(1940), added: 4415, mode: `MaxEncodedLen`)
	/// Storage: `Sminer::CompleteSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteSnapShot` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn submit_verify_idle_result_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7431`
		//  Estimated: `33512`
		// Minimum execution time: 112_998_000 picoseconds.
		Weight::from_parts(198_500_000, 33512)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Sminer::CompleteMinerSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteMinerSnapShot` (`max_values`: None, `max_size`: Some(1940), added: 4415, mode: `MaxEncodedLen`)
	/// Storage: `Sminer::CompleteSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteSnapShot` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Audit::CountedServiceFailed` (r:0 w:1)
	/// Proof: `Audit::CountedServiceFailed` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn submit_verify_service_result_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7431`
		//  Estimated: `33512`
		// Minimum execution time: 108_320_000 picoseconds.
		Weight::from_parts(170_082_000, 33512)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::ValidationTypeList` (r:1 w:0)
	/// Proof: `TeeWorker::ValidationTypeList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::AuthorVrfRandomness` (r:1 w:0)
	/// Proof: `Babe::AuthorVrfRandomness` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn submit_idle_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4930`
		//  Estimated: `33512`
		// Minimum execution time: 45_539_000 picoseconds.
		Weight::from_parts(87_906_000, 33512)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::ValidationTypeList` (r:1 w:0)
	/// Proof: `TeeWorker::ValidationTypeList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::AuthorVrfRandomness` (r:1 w:0)
	/// Proof: `Babe::AuthorVrfRandomness` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn submit_service_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4930`
		//  Estimated: `33512`
		// Minimum execution time: 51_521_000 picoseconds.
		Weight::from_parts(92_788_000, 33512)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn submit_verify_idle_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5040`
		//  Estimated: `33512`
		// Minimum execution time: 94_299_000 picoseconds.
		Weight::from_parts(147_249_000, 33512)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Audit::CountedServiceFailed` (r:0 w:1)
	/// Proof: `Audit::CountedServiceFailed` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn submit_verify_service_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7024`
		//  Estimated: `33512`
		// Minimum execution time: 110_690_000 picoseconds.
		Weight::from_parts(188_559_000, 33512)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Sminer::CompleteMinerSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteMinerSnapShot` (`max_values`: None, `max_size`: Some(1940), added: 4415, mode: `MaxEncodedLen`)
	/// Storage: `Sminer::CompleteSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteSnapShot` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn submit_verify_idle_result_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7431`
		//  Estimated: `33512`
		// Minimum execution time: 112_998_000 picoseconds.
		Weight::from_parts(198_500_000, 33512)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Sminer::CompleteMinerSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteMinerSnapShot` (`max_values`: None, `max_size`: Some(1940), added: 4415, mode: `MaxEncodedLen`)
	/// Storage: `Sminer::CompleteSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteSnapShot` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Audit::CountedServiceFailed` (r:0 w:1)
	/// Proof: `Audit::CountedServiceFailed` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn submit_verify_service_result_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7431`
		//  Estimated: `33512`
		// Minimum execution time: 108_320_000 picoseconds.
		Weight::from_parts(170_082_000, 33512)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
}

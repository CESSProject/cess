
//! Autogenerated weights for `pallet_audit`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ytqaljn-virtual-machine`, CPU: `12th Gen Intel(R) Core(TM) i5-12400`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("cess-initial-testnet")`, DB CACHE: 1024

// Executed Command:
// ./target/release/cess-node
// benchmark
// pallet
// --chain
// cess-initial-testnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_audit
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output=./pallets/audit/src/temp_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_audit`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_audit::WeightInfo for WeightInfo<T> {
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::ValidationTypeList` (r:1 w:0)
	/// Proof: `TeeWorker::ValidationTypeList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::AuthorVrfRandomness` (r:1 w:0)
	/// Proof: `Babe::AuthorVrfRandomness` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn submit_idle_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4930`
		//  Estimated: `33512`
		// Minimum execution time: 38_446_000 picoseconds.
		Weight::from_parts(44_265_000, 0)
			.saturating_add(Weight::from_parts(0, 33512))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::ValidationTypeList` (r:1 w:0)
	/// Proof: `TeeWorker::ValidationTypeList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::AuthorVrfRandomness` (r:1 w:0)
	/// Proof: `Babe::AuthorVrfRandomness` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	fn submit_service_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4930`
		//  Estimated: `33512`
		// Minimum execution time: 40_406_000 picoseconds.
		Weight::from_parts(44_888_000, 0)
			.saturating_add(Weight::from_parts(0, 33512))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn submit_verify_idle_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5040`
		//  Estimated: `33512`
		// Minimum execution time: 90_600_000 picoseconds.
		Weight::from_parts(118_358_000, 0)
			.saturating_add(Weight::from_parts(0, 33512))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Audit::CountedServiceFailed` (r:0 w:1)
	/// Proof: `Audit::CountedServiceFailed` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn submit_verify_service_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7024`
		//  Estimated: `33512`
		// Minimum execution time: 97_201_000 picoseconds.
		Weight::from_parts(112_934_000, 0)
			.saturating_add(Weight::from_parts(0, 33512))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Sminer::CompleteMinerSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteMinerSnapShot` (`max_values`: None, `max_size`: Some(1940), added: 4415, mode: `MaxEncodedLen`)
	/// Storage: `Sminer::CompleteSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteSnapShot` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	fn submit_verify_idle_result_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7431`
		//  Estimated: `33512`
		// Minimum execution time: 101_147_000 picoseconds.
		Weight::from_parts(110_941_000, 0)
			.saturating_add(Weight::from_parts(0, 33512))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Audit::ChallengeSnapShot` (r:1 w:1)
	/// Proof: `Audit::ChallengeSnapShot` (`max_values`: None, `max_size`: Some(30047), added: 32522, mode: `MaxEncodedLen`)
	/// Storage: `TeeWorker::Workers` (r:1 w:0)
	/// Proof: `TeeWorker::Workers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::MasterPubkey` (r:1 w:0)
	/// Proof: `TeeWorker::MasterPubkey` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TeeWorker::LastWork` (r:1 w:1)
	/// Proof: `TeeWorker::LastWork` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Sminer::CompleteMinerSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteMinerSnapShot` (`max_values`: None, `max_size`: Some(1940), added: 4415, mode: `MaxEncodedLen`)
	/// Storage: `Sminer::CompleteSnapShot` (r:1 w:1)
	/// Proof: `Sminer::CompleteSnapShot` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `SchedulerCredit::CurrentCounters` (r:1 w:1)
	/// Proof: `SchedulerCredit::CurrentCounters` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Audit::CountedServiceFailed` (r:0 w:1)
	/// Proof: `Audit::CountedServiceFailed` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn submit_verify_service_result_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7431`
		//  Estimated: `33512`
		// Minimum execution time: 109_107_000 picoseconds.
		Weight::from_parts(119_435_000, 0)
			.saturating_add(Weight::from_parts(0, 33512))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
}

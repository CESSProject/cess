
//! Autogenerated weights for `pallet_oss`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ytqaljn-virtual-machine`, CPU: `12th Gen Intel(R) Core(TM) i5-12400`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("cess-initial-testnet")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cess-node
// benchmark
// pallet
// --chain
// cess-initial-testnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_oss
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/oss/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_oss`.
pub trait WeightInfo {
	fn authorize() -> Weight;
	fn cancel_authorize() -> Weight;
	fn register() -> Weight;
	fn update() -> Weight;
	fn destroy() -> Weight;
	fn proxy_authorzie() -> Weight;
}

/// Weights for `pallet_oss` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Oss::AuthorityList` (r:1 w:1)
	/// Proof: `Oss::AuthorityList` (`max_values`: None, `max_size`: Some(689), added: 3164, mode: `MaxEncodedLen`)
	fn authorize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `4154`
		// Minimum execution time: 12_006_000 picoseconds.
		Weight::from_parts(12_896_000, 4154)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::AuthorityList` (r:1 w:1)
	/// Proof: `Oss::AuthorityList` (`max_values`: None, `max_size`: Some(689), added: 3164, mode: `MaxEncodedLen`)
	fn cancel_authorize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185`
		//  Estimated: `4154`
		// Minimum execution time: 14_981_000 picoseconds.
		Weight::from_parts(15_753_000, 4154)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::Oss` (r:1 w:1)
	/// Proof: `Oss::Oss` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3602`
		// Minimum execution time: 12_518_000 picoseconds.
		Weight::from_parts(13_270_000, 3602)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::Oss` (r:1 w:1)
	/// Proof: `Oss::Oss` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3602`
		// Minimum execution time: 14_902_000 picoseconds.
		Weight::from_parts(15_665_000, 3602)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::Oss` (r:1 w:1)
	/// Proof: `Oss::Oss` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn destroy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `181`
		//  Estimated: `3602`
		// Minimum execution time: 14_385_000 picoseconds.
		Weight::from_parts(15_386_000, 3602)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::AuthorityList` (r:1 w:1)
	/// Proof: `Oss::AuthorityList` (`max_values`: None, `max_size`: Some(689), added: 3164, mode: `MaxEncodedLen`)
	fn proxy_authorzie() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `4154`
		// Minimum execution time: 48_682_000 picoseconds.
		Weight::from_parts(57_435_000, 4154)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Oss::AuthorityList` (r:1 w:1)
	/// Proof: `Oss::AuthorityList` (`max_values`: None, `max_size`: Some(689), added: 3164, mode: `MaxEncodedLen`)
	fn authorize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `4154`
		// Minimum execution time: 12_006_000 picoseconds.
		Weight::from_parts(12_896_000, 4154)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::AuthorityList` (r:1 w:1)
	/// Proof: `Oss::AuthorityList` (`max_values`: None, `max_size`: Some(689), added: 3164, mode: `MaxEncodedLen`)
	fn cancel_authorize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185`
		//  Estimated: `4154`
		// Minimum execution time: 14_981_000 picoseconds.
		Weight::from_parts(15_753_000, 4154)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::Oss` (r:1 w:1)
	/// Proof: `Oss::Oss` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3602`
		// Minimum execution time: 12_518_000 picoseconds.
		Weight::from_parts(13_270_000, 3602)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::Oss` (r:1 w:1)
	/// Proof: `Oss::Oss` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3602`
		// Minimum execution time: 14_902_000 picoseconds.
		Weight::from_parts(15_665_000, 3602)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::Oss` (r:1 w:1)
	/// Proof: `Oss::Oss` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn destroy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `181`
		//  Estimated: `3602`
		// Minimum execution time: 14_385_000 picoseconds.
		Weight::from_parts(15_386_000, 3602)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Oss::AuthorityList` (r:1 w:1)
	/// Proof: `Oss::AuthorityList` (`max_values`: None, `max_size`: Some(689), added: 3164, mode: `MaxEncodedLen`)
	fn proxy_authorzie() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `4154`
		// Minimum execution time: 48_682_000 picoseconds.
		Weight::from_parts(57_435_000, 4154)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}

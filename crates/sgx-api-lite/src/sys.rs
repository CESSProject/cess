/* automatically generated by rust-bindgen 0.60.1 */
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]
#![allow(clippy::useless_transmute)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const RED_ZONE_SIZE: u32 = 128;
pub const _ASSERT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SE_KEY_SIZE: u32 = 384;
pub const SE_EXPONENT_SIZE: u32 = 4;
pub const SGX_HASH_SIZE: u32 = 32;
pub const SGX_MAC_SIZE: u32 = 16;
pub const SGX_CPUSVN_SIZE: u32 = 16;
pub const SGX_CONFIGID_SIZE: u32 = 64;
pub const SGX_KEYID_SIZE: u32 = 32;
pub const SGX_REPORT_DATA_SIZE: u32 = 64;
pub const SGX_ISVEXT_PROD_ID_SIZE: u32 = 16;
pub const SGX_ISV_FAMILY_ID_SIZE: u32 = 16;
pub const SGX_FLAGS_INITIALIZED: u32 = 1;
pub const SGX_FLAGS_DEBUG: u32 = 2;
pub const SGX_FLAGS_MODE64BIT: u32 = 4;
pub const SGX_FLAGS_PROVISION_KEY: u32 = 16;
pub const SGX_FLAGS_LICENSE_KEY: u32 = 32;
pub const SGX_FLAGS_MASK_CONST: i32 = -1;
pub const SGX_XFRM_LEGACY: u32 = 3;
pub const SGX_XFRM_AVX: u32 = 4;
pub const SGX_XFRM_MPX: u32 = 24;
pub const SGX_XFRM_AVX512: u32 = 228;
pub const SGX_XFRM_PKRU: u32 = 512;
pub const SGX_XFRM_AMX: u32 = 393216;
pub const SGX_XFRM_RESERVED: i32 = -393984;
pub const SGX_XFRM_MASK_CONST: i32 = -393445;
pub const SGX_MISCSELECT_EXINFO: u32 = 1;
pub const SGX_MISCSELECT_MASK_CONST: u32 = 4294967295;
pub const TCS_FLAGS_DBGOPTIN: u32 = 1;
pub const SGX_EXCEPTION_HARDWARE: u32 = 3;
pub const SGX_EXCEPTION_SOFTWARE: u32 = 6;
pub const SGX_EXCEPTION_VECTOR_DE: u32 = 0;
pub const SGX_EXCEPTION_VECTOR_DB: u32 = 1;
pub const SGX_EXCEPTION_VECTOR_BP: u32 = 3;
pub const SGX_EXCEPTION_VECTOR_BR: u32 = 5;
pub const SGX_EXCEPTION_VECTOR_UD: u32 = 6;
pub const SGX_EXCEPTION_VECTOR_MF: u32 = 16;
pub const SGX_EXCEPTION_VECTOR_AC: u32 = 17;
pub const SGX_EXCEPTION_VECTOR_XM: u32 = 19;
pub const SGX_SECINFO_FLAGS_R: u32 = 1;
pub const SGX_SECINFO_FLAGS_W: u32 = 2;
pub const SGX_SECINFO_FLAGS_X: u32 = 4;
pub const SGX_SECINFO_FLAGS_SECS: u32 = 0;
pub const SGX_SECINFO_FLAGS_TCS: u32 = 256;
pub const SGX_SECINFO_FLAGS_REG: u32 = 512;
pub const SGX_REPORT_SIGNED_SIZE: u32 = 384;
pub const SGX_REPORT_ACTUAL_SIZE: u32 = 432;
pub const ENCLU: &[u8; 23usize] = b".byte 0x0f, 0x01, 0xd7\0";
pub const EENTER: u32 = 2;
pub const ERESUME: u32 = 3;
pub const EDBGRD: u32 = 4;
pub const EDBGWR: u32 = 5;
pub const EREPORT: u32 = 0;
pub const EGETKEY: u32 = 1;
pub const EEXIT: u32 = 4;
pub const SGX_LAUNCH_KEY: u16 = 0;
pub const SGX_PROVISION_KEY: u16 = 1;
pub const SGX_PROVISION_SEAL_KEY: u16 = 2;
pub const SGX_REPORT_KEY: u16 = 3;
pub const SGX_SEAL_KEY: u16 = 4;
pub const SGX_KEYPOLICY_MRENCLAVE: u32 = 1;
pub const SGX_KEYPOLICY_MRSIGNER: u32 = 2;
pub const STACK_ALIGN: i32 = -16;
pub const XSAVE_ALIGN: i32 = -64;
pub const XSAVE_NON_FX_MASK: i32 = -4;
pub const RETURN_FROM_OCALL: i32 = -1;
pub const RFLAGS_DF: u32 = 1024;
pub const RFLAGS_AC: u32 = 262144;
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    );
}
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    fn test_field___clang_max_align_nonce1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
    }
    test_field___clang_max_align_nonce1();
    fn test_field___clang_max_align_nonce2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    test_field___clang_max_align_nonce2();
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sgx_measurement_t {
    pub m: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__sgx_measurement_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_measurement_t>(),
        32usize,
        concat!("Size of: ", stringify!(_sgx_measurement_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_measurement_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_measurement_t))
    );
    fn test_field_m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_sgx_measurement_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_sgx_measurement_t),
                "::",
                stringify!(m)
            )
        );
    }
    test_field_m();
}
pub type sgx_measurement_t = _sgx_measurement_t;
pub type sgx_mac_t = [u8; 16usize];
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _sgx_attributes_t {
    pub flags: u64,
    pub xfrm: u64,
}
#[test]
fn bindgen_test_layout__sgx_attributes_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_attributes_t>(),
        16usize,
        concat!("Size of: ", stringify!(_sgx_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_attributes_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_attributes_t))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_sgx_attributes_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_sgx_attributes_t),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_xfrm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_sgx_attributes_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xfrm) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_sgx_attributes_t),
                "::",
                stringify!(xfrm)
            )
        );
    }
    test_field_xfrm();
}
pub type sgx_attributes_t = _sgx_attributes_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sgx_cpu_svn_t {
    pub svn: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__sgx_cpu_svn_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_cpu_svn_t>(),
        16usize,
        concat!("Size of: ", stringify!(_sgx_cpu_svn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_cpu_svn_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_cpu_svn_t))
    );
    fn test_field_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_sgx_cpu_svn_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).svn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_sgx_cpu_svn_t),
                "::",
                stringify!(svn)
            )
        );
    }
    test_field_svn();
}
pub type sgx_cpu_svn_t = _sgx_cpu_svn_t;
pub type sgx_misc_select_t = u32;
pub type sgx_prod_id_t = u16;
pub type sgx_isv_svn_t = u16;
pub type sgx_config_svn_t = u16;
pub type sgx_config_id_t = [u8; 64usize];
pub type sgx_isvext_prod_id_t = [u8; 16usize];
pub type sgx_isvfamily_id_t = [u8; 16usize];
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sgx_arch_secs_t {
    pub size: u64,
    pub base: u64,
    pub ssa_frame_size: u32,
    pub misc_select: sgx_misc_select_t,
    pub reserved1: [u8; 24usize],
    pub attributes: sgx_attributes_t,
    pub mr_enclave: sgx_measurement_t,
    pub reserved2: [u8; 32usize],
    pub mr_signer: sgx_measurement_t,
    pub reserved3: [u8; 32usize],
    pub config_id: sgx_config_id_t,
    pub isv_prod_id: sgx_prod_id_t,
    pub isv_svn: sgx_isv_svn_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved4: [u8; 3834usize],
}
#[test]
fn bindgen_test_layout_sgx_arch_secs_t() {
    assert_eq!(
        ::std::mem::size_of::<sgx_arch_secs_t>(),
        4096usize,
        concat!("Size of: ", stringify!(sgx_arch_secs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sgx_arch_secs_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sgx_arch_secs_t))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(base)
            )
        );
    }
    test_field_base();
    fn test_field_ssa_frame_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ssa_frame_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(ssa_frame_size)
            )
        );
    }
    test_field_ssa_frame_size();
    fn test_field_misc_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).misc_select) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(misc_select)
            )
        );
    }
    test_field_misc_select();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
    fn test_field_mr_enclave() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mr_enclave) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(mr_enclave)
            )
        );
    }
    test_field_mr_enclave();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_mr_signer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mr_signer) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(mr_signer)
            )
        );
    }
    test_field_mr_signer();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
    fn test_field_config_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).config_id) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(config_id)
            )
        );
    }
    test_field_config_id();
    fn test_field_isv_prod_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_prod_id) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(isv_prod_id)
            )
        );
    }
    test_field_isv_prod_id();
    fn test_field_isv_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_svn) as usize - ptr as usize
            },
            258usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(isv_svn)
            )
        );
    }
    test_field_isv_svn();
    fn test_field_config_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).config_svn) as usize - ptr as usize
            },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(config_svn)
            )
        );
    }
    test_field_config_svn();
    fn test_field_reserved4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_secs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved4) as usize - ptr as usize
            },
            262usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_secs_t),
                "::",
                stringify!(reserved4)
            )
        );
    }
    test_field_reserved4();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sgx_arch_tcs_t {
    pub reserved0: u64,
    pub flags: u64,
    pub ossa: u64,
    pub cssa: u32,
    pub nssa: u32,
    pub oentry: u64,
    pub reserved1: u64,
    pub ofs_base: u64,
    pub ogs_base: u64,
    pub ofs_limit: u32,
    pub ogs_limit: u32,
    pub reserved3: [u8; 4024usize],
}
#[test]
fn bindgen_test_layout_sgx_arch_tcs_t() {
    assert_eq!(
        ::std::mem::size_of::<sgx_arch_tcs_t>(),
        4096usize,
        concat!("Size of: ", stringify!(sgx_arch_tcs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sgx_arch_tcs_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sgx_arch_tcs_t))
    );
    fn test_field_reserved0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(reserved0)
            )
        );
    }
    test_field_reserved0();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_ossa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ossa) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(ossa)
            )
        );
    }
    test_field_ossa();
    fn test_field_cssa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cssa) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(cssa)
            )
        );
    }
    test_field_cssa();
    fn test_field_nssa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nssa) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(nssa)
            )
        );
    }
    test_field_nssa();
    fn test_field_oentry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).oentry) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(oentry)
            )
        );
    }
    test_field_oentry();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_ofs_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ofs_base) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(ofs_base)
            )
        );
    }
    test_field_ofs_base();
    fn test_field_ogs_base() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ogs_base) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(ogs_base)
            )
        );
    }
    test_field_ogs_base();
    fn test_field_ofs_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ofs_limit) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(ofs_limit)
            )
        );
    }
    test_field_ofs_limit();
    fn test_field_ogs_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ogs_limit) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(ogs_limit)
            )
        );
    }
    test_field_ogs_limit();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_tcs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_tcs_t),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sgx_pal_gpr_t {
    pub rax: u64,
    pub rcx: u64,
    pub rdx: u64,
    pub rbx: u64,
    pub rsp: u64,
    pub rbp: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    pub r11: u64,
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rflags: u64,
    pub rip: u64,
    pub ursp: u64,
    pub urbp: u64,
    pub exitinfo: u32,
    pub reserved: u32,
    pub fsbase: u64,
    pub gsbase: u64,
}
#[test]
fn bindgen_test_layout_sgx_pal_gpr_t() {
    assert_eq!(
        ::std::mem::size_of::<sgx_pal_gpr_t>(),
        184usize,
        concat!("Size of: ", stringify!(sgx_pal_gpr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sgx_pal_gpr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sgx_pal_gpr_t))
    );
    fn test_field_rax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rax)
            )
        );
    }
    test_field_rax();
    fn test_field_rcx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rcx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rcx)
            )
        );
    }
    test_field_rcx();
    fn test_field_rdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rdx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rdx)
            )
        );
    }
    test_field_rdx();
    fn test_field_rbx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rbx) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rbx)
            )
        );
    }
    test_field_rbx();
    fn test_field_rsp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsp) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rsp)
            )
        );
    }
    test_field_rsp();
    fn test_field_rbp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rbp) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rbp)
            )
        );
    }
    test_field_rbp();
    fn test_field_rsi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsi) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rsi)
            )
        );
    }
    test_field_rsi();
    fn test_field_rdi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rdi) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rdi)
            )
        );
    }
    test_field_rdi();
    fn test_field_r8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(r8)
            )
        );
    }
    test_field_r8();
    fn test_field_r9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(r9)
            )
        );
    }
    test_field_r9();
    fn test_field_r10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r10) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(r10)
            )
        );
    }
    test_field_r10();
    fn test_field_r11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r11) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(r11)
            )
        );
    }
    test_field_r11();
    fn test_field_r12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r12) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(r12)
            )
        );
    }
    test_field_r12();
    fn test_field_r13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r13) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(r13)
            )
        );
    }
    test_field_r13();
    fn test_field_r14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r14) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(r14)
            )
        );
    }
    test_field_r14();
    fn test_field_r15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r15) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(r15)
            )
        );
    }
    test_field_r15();
    fn test_field_rflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rflags) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rflags)
            )
        );
    }
    test_field_rflags();
    fn test_field_rip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rip) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(rip)
            )
        );
    }
    test_field_rip();
    fn test_field_ursp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ursp) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(ursp)
            )
        );
    }
    test_field_ursp();
    fn test_field_urbp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).urbp) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(urbp)
            )
        );
    }
    test_field_urbp();
    fn test_field_exitinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).exitinfo) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(exitinfo)
            )
        );
    }
    test_field_exitinfo();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            164usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
    fn test_field_fsbase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fsbase) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(fsbase)
            )
        );
    }
    test_field_fsbase();
    fn test_field_gsbase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_pal_gpr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gsbase) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_pal_gpr_t),
                "::",
                stringify!(gsbase)
            )
        );
    }
    test_field_gsbase();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sgx_cpu_context_t {
    pub rax: u64,
    pub rcx: u64,
    pub rdx: u64,
    pub rbx: u64,
    pub rsp: u64,
    pub rbp: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    pub r11: u64,
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rflags: u64,
    pub rip: u64,
}
#[test]
fn bindgen_test_layout_sgx_cpu_context_t() {
    assert_eq!(
        ::std::mem::size_of::<sgx_cpu_context_t>(),
        144usize,
        concat!("Size of: ", stringify!(sgx_cpu_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sgx_cpu_context_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sgx_cpu_context_t))
    );
    fn test_field_rax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rax)
            )
        );
    }
    test_field_rax();
    fn test_field_rcx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rcx) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rcx)
            )
        );
    }
    test_field_rcx();
    fn test_field_rdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rdx) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rdx)
            )
        );
    }
    test_field_rdx();
    fn test_field_rbx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rbx) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rbx)
            )
        );
    }
    test_field_rbx();
    fn test_field_rsp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsp) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rsp)
            )
        );
    }
    test_field_rsp();
    fn test_field_rbp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rbp) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rbp)
            )
        );
    }
    test_field_rbp();
    fn test_field_rsi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rsi) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rsi)
            )
        );
    }
    test_field_rsi();
    fn test_field_rdi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rdi) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rdi)
            )
        );
    }
    test_field_rdi();
    fn test_field_r8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(r8)
            )
        );
    }
    test_field_r8();
    fn test_field_r9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(r9)
            )
        );
    }
    test_field_r9();
    fn test_field_r10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r10) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(r10)
            )
        );
    }
    test_field_r10();
    fn test_field_r11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r11) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(r11)
            )
        );
    }
    test_field_r11();
    fn test_field_r12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r12) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(r12)
            )
        );
    }
    test_field_r12();
    fn test_field_r13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r13) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(r13)
            )
        );
    }
    test_field_r13();
    fn test_field_r14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r14) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(r14)
            )
        );
    }
    test_field_r14();
    fn test_field_r15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r15) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(r15)
            )
        );
    }
    test_field_r15();
    fn test_field_rflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rflags) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rflags)
            )
        );
    }
    test_field_rflags();
    fn test_field_rip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_cpu_context_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rip) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_cpu_context_t),
                "::",
                stringify!(rip)
            )
        );
    }
    test_field_rip();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sgx_arch_exit_info_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_sgx_arch_exit_info_t() {
    assert_eq!(
        ::std::mem::size_of::<sgx_arch_exit_info_t>(),
        4usize,
        concat!("Size of: ", stringify!(sgx_arch_exit_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sgx_arch_exit_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sgx_arch_exit_info_t))
    );
}
impl sgx_arch_exit_info_t {
    #[inline]
    pub fn vector(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_vector(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn exit_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_exit_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn valid(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vector: u32,
        exit_type: u32,
        reserved: u32,
        valid: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let vector: u32 = unsafe { ::std::mem::transmute(vector) };
            vector as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let exit_type: u32 = unsafe { ::std::mem::transmute(exit_type) };
            exit_type as u64
        });
        __bindgen_bitfield_unit.set(11usize, 20u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let valid: u32 = unsafe { ::std::mem::transmute(valid) };
            valid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sgx_arch_page_info_t {
    pub lin_addr: u64,
    pub src_pge: u64,
    pub sec_info: u64,
    pub secs: u64,
}
#[test]
fn bindgen_test_layout_sgx_arch_page_info_t() {
    assert_eq!(
        ::std::mem::size_of::<sgx_arch_page_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(sgx_arch_page_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sgx_arch_page_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sgx_arch_page_info_t))
    );
    fn test_field_lin_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_page_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lin_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_page_info_t),
                "::",
                stringify!(lin_addr)
            )
        );
    }
    test_field_lin_addr();
    fn test_field_src_pge() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_page_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src_pge) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_page_info_t),
                "::",
                stringify!(src_pge)
            )
        );
    }
    test_field_src_pge();
    fn test_field_sec_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_page_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sec_info) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_page_info_t),
                "::",
                stringify!(sec_info)
            )
        );
    }
    test_field_sec_info();
    fn test_field_secs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_page_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).secs) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_page_info_t),
                "::",
                stringify!(secs)
            )
        );
    }
    test_field_secs();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sgx_arch_sec_info_t {
    pub flags: u64,
    pub reserved: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_sgx_arch_sec_info_t() {
    assert_eq!(
        ::std::mem::size_of::<sgx_arch_sec_info_t>(),
        64usize,
        concat!("Size of: ", stringify!(sgx_arch_sec_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sgx_arch_sec_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sgx_arch_sec_info_t))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_sec_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_sec_info_t),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_sec_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_sec_info_t),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _css_header_t {
    pub header: [u8; 12usize],
    pub type_: u32,
    pub module_vendor: u32,
    pub date: u32,
    pub header2: [u8; 16usize],
    pub hw_version: u32,
    pub reserved: [u8; 84usize],
}
#[test]
fn bindgen_test_layout__css_header_t() {
    assert_eq!(
        ::std::mem::size_of::<_css_header_t>(),
        128usize,
        concat!("Size of: ", stringify!(_css_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_css_header_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_css_header_t))
    );
    fn test_field_header() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_header_t),
                "::",
                stringify!(header)
            )
        );
    }
    test_field_header();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_header_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_module_vendor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).module_vendor) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_header_t),
                "::",
                stringify!(module_vendor)
            )
        );
    }
    test_field_module_vendor();
    fn test_field_date() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).date) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_header_t),
                "::",
                stringify!(date)
            )
        );
    }
    test_field_date();
    fn test_field_header2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).header2) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_header_t),
                "::",
                stringify!(header2)
            )
        );
    }
    test_field_header2();
    fn test_field_hw_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hw_version) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_header_t),
                "::",
                stringify!(hw_version)
            )
        );
    }
    test_field_hw_version();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_header_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_header_t),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
}
pub type css_header_t = _css_header_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _css_key_t {
    pub modulus: [u8; 384usize],
    pub exponent: [u8; 4usize],
    pub signature: [u8; 384usize],
}
#[test]
fn bindgen_test_layout__css_key_t() {
    assert_eq!(
        ::std::mem::size_of::<_css_key_t>(),
        772usize,
        concat!("Size of: ", stringify!(_css_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_css_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_css_key_t))
    );
    fn test_field_modulus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_key_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modulus) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_key_t),
                "::",
                stringify!(modulus)
            )
        );
    }
    test_field_modulus();
    fn test_field_exponent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_key_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_key_t),
                "::",
                stringify!(exponent)
            )
        );
    }
    test_field_exponent();
    fn test_field_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_key_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize
            },
            388usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_key_t),
                "::",
                stringify!(signature)
            )
        );
    }
    test_field_signature();
}
pub type css_key_t = _css_key_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _css_body_t {
    pub misc_select: sgx_misc_select_t,
    pub misc_mask: sgx_misc_select_t,
    pub reserved: [u8; 4usize],
    pub isv_family_id: sgx_isvfamily_id_t,
    pub attributes: sgx_attributes_t,
    pub attribute_mask: sgx_attributes_t,
    pub enclave_hash: sgx_measurement_t,
    pub reserved2: [u8; 16usize],
    pub isvext_prod_id: sgx_isvext_prod_id_t,
    pub isv_prod_id: u16,
    pub isv_svn: u16,
}
#[test]
fn bindgen_test_layout__css_body_t() {
    assert_eq!(
        ::std::mem::size_of::<_css_body_t>(),
        128usize,
        concat!("Size of: ", stringify!(_css_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_css_body_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_css_body_t))
    );
    fn test_field_misc_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).misc_select) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(misc_select)
            )
        );
    }
    test_field_misc_select();
    fn test_field_misc_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).misc_mask) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(misc_mask)
            )
        );
    }
    test_field_misc_mask();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
    fn test_field_isv_family_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_family_id) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(isv_family_id)
            )
        );
    }
    test_field_isv_family_id();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
    fn test_field_attribute_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attribute_mask) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(attribute_mask)
            )
        );
    }
    test_field_attribute_mask();
    fn test_field_enclave_hash() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enclave_hash) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(enclave_hash)
            )
        );
    }
    test_field_enclave_hash();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_isvext_prod_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isvext_prod_id) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(isvext_prod_id)
            )
        );
    }
    test_field_isvext_prod_id();
    fn test_field_isv_prod_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_prod_id) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(isv_prod_id)
            )
        );
    }
    test_field_isv_prod_id();
    fn test_field_isv_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_svn) as usize - ptr as usize
            },
            126usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_body_t),
                "::",
                stringify!(isv_svn)
            )
        );
    }
    test_field_isv_svn();
}
pub type css_body_t = _css_body_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _css_buffer_t {
    pub reserved: [u8; 12usize],
    pub q1: [u8; 384usize],
    pub q2: [u8; 384usize],
}
#[test]
fn bindgen_test_layout__css_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<_css_buffer_t>(),
        780usize,
        concat!("Size of: ", stringify!(_css_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_css_buffer_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_css_buffer_t))
    );
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_buffer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_buffer_t),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
    fn test_field_q1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_buffer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q1) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_buffer_t),
                "::",
                stringify!(q1)
            )
        );
    }
    test_field_q1();
    fn test_field_q2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_css_buffer_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).q2) as usize - ptr as usize
            },
            396usize,
            concat!(
                "Offset of field: ",
                stringify!(_css_buffer_t),
                "::",
                stringify!(q2)
            )
        );
    }
    test_field_q2();
}
pub type css_buffer_t = _css_buffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _enclave_css_t {
    pub header: css_header_t,
    pub key: css_key_t,
    pub body: css_body_t,
    pub buffer: css_buffer_t,
}
#[test]
fn bindgen_test_layout__enclave_css_t() {
    assert_eq!(
        ::std::mem::size_of::<_enclave_css_t>(),
        1808usize,
        concat!("Size of: ", stringify!(_enclave_css_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_enclave_css_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_enclave_css_t))
    );
    fn test_field_header() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_enclave_css_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_enclave_css_t),
                "::",
                stringify!(header)
            )
        );
    }
    test_field_header();
    fn test_field_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_enclave_css_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_enclave_css_t),
                "::",
                stringify!(key)
            )
        );
    }
    test_field_key();
    fn test_field_body() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_enclave_css_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize
            },
            900usize,
            concat!(
                "Offset of field: ",
                stringify!(_enclave_css_t),
                "::",
                stringify!(body)
            )
        );
    }
    test_field_body();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_enclave_css_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            1028usize,
            concat!(
                "Offset of field: ",
                stringify!(_enclave_css_t),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
}
pub type sgx_arch_enclave_css_t = _enclave_css_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sgx_key_id_t {
    pub id: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__sgx_key_id_t() {
    assert_eq!(
        ::std::mem::size_of::<_sgx_key_id_t>(),
        32usize,
        concat!("Size of: ", stringify!(_sgx_key_id_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sgx_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_key_id_t))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_sgx_key_id_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_sgx_key_id_t),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
}
pub type sgx_key_id_t = _sgx_key_id_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct launch_body_t {
    pub valid: u32,
    pub reserved1: [u32; 11usize],
    pub attributes: sgx_attributes_t,
    pub mr_enclave: sgx_measurement_t,
    pub reserved2: [u8; 32usize],
    pub mr_signer: sgx_measurement_t,
    pub reserved3: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_launch_body_t() {
    assert_eq!(
        ::std::mem::size_of::<launch_body_t>(),
        192usize,
        concat!("Size of: ", stringify!(launch_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<launch_body_t>(),
        1usize,
        concat!("Alignment of ", stringify!(launch_body_t))
    );
    fn test_field_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<launch_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(launch_body_t),
                "::",
                stringify!(valid)
            )
        );
    }
    test_field_valid();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<launch_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(launch_body_t),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<launch_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(launch_body_t),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
    fn test_field_mr_enclave() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<launch_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mr_enclave) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(launch_body_t),
                "::",
                stringify!(mr_enclave)
            )
        );
    }
    test_field_mr_enclave();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<launch_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(launch_body_t),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_mr_signer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<launch_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mr_signer) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(launch_body_t),
                "::",
                stringify!(mr_signer)
            )
        );
    }
    test_field_mr_signer();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<launch_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(launch_body_t),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sgx_arch_token_t {
    pub body: launch_body_t,
    pub cpu_svn_le: sgx_cpu_svn_t,
    pub isv_prod_id_le: sgx_prod_id_t,
    pub isv_svn_le: sgx_isv_svn_t,
    pub reserved2: [u8; 24usize],
    pub masked_misc_select_le: sgx_misc_select_t,
    pub attributes_le: sgx_attributes_t,
    pub key_id: sgx_key_id_t,
    pub mac: sgx_mac_t,
}
#[test]
fn bindgen_test_layout_sgx_arch_token_t() {
    assert_eq!(
        ::std::mem::size_of::<sgx_arch_token_t>(),
        304usize,
        concat!("Size of: ", stringify!(sgx_arch_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sgx_arch_token_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sgx_arch_token_t))
    );
    fn test_field_body() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(body)
            )
        );
    }
    test_field_body();
    fn test_field_cpu_svn_le() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_svn_le) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(cpu_svn_le)
            )
        );
    }
    test_field_cpu_svn_le();
    fn test_field_isv_prod_id_le() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_prod_id_le) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(isv_prod_id_le)
            )
        );
    }
    test_field_isv_prod_id_le();
    fn test_field_isv_svn_le() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_svn_le) as usize - ptr as usize
            },
            210usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(isv_svn_le)
            )
        );
    }
    test_field_isv_svn_le();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            212usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_masked_misc_select_le() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).masked_misc_select_le) as usize - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(masked_misc_select_le)
            )
        );
    }
    test_field_masked_misc_select_le();
    fn test_field_attributes_le() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes_le) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(attributes_le)
            )
        );
    }
    test_field_attributes_le();
    fn test_field_key_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_id) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(key_id)
            )
        );
    }
    test_field_key_id();
    fn test_field_mac() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sgx_arch_token_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mac) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(sgx_arch_token_t),
                "::",
                stringify!(mac)
            )
        );
    }
    test_field_mac();
}
pub type sgx_report_data_t = [u8; 64usize];
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _report_body_t {
    pub cpu_svn: sgx_cpu_svn_t,
    pub misc_select: sgx_misc_select_t,
    pub reserved1: [u8; 12usize],
    pub isv_ext_prod_id: sgx_isvext_prod_id_t,
    pub attributes: sgx_attributes_t,
    pub mr_enclave: sgx_measurement_t,
    pub reserved2: [u8; 32usize],
    pub mr_signer: sgx_measurement_t,
    pub reserved3: [u8; 32usize],
    pub config_id: sgx_config_id_t,
    pub isv_prod_id: sgx_prod_id_t,
    pub isv_svn: sgx_isv_svn_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved4: [u8; 42usize],
    pub isv_family_id: sgx_isvfamily_id_t,
    pub report_data: sgx_report_data_t,
}
#[test]
fn bindgen_test_layout__report_body_t() {
    assert_eq!(
        ::std::mem::size_of::<_report_body_t>(),
        384usize,
        concat!("Size of: ", stringify!(_report_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_report_body_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_report_body_t))
    );
    fn test_field_cpu_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_svn) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(cpu_svn)
            )
        );
    }
    test_field_cpu_svn();
    fn test_field_misc_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).misc_select) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(misc_select)
            )
        );
    }
    test_field_misc_select();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_isv_ext_prod_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_ext_prod_id) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(isv_ext_prod_id)
            )
        );
    }
    test_field_isv_ext_prod_id();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
    fn test_field_mr_enclave() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mr_enclave) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(mr_enclave)
            )
        );
    }
    test_field_mr_enclave();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_mr_signer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mr_signer) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(mr_signer)
            )
        );
    }
    test_field_mr_signer();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
    fn test_field_config_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).config_id) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(config_id)
            )
        );
    }
    test_field_config_id();
    fn test_field_isv_prod_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_prod_id) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(isv_prod_id)
            )
        );
    }
    test_field_isv_prod_id();
    fn test_field_isv_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_svn) as usize - ptr as usize
            },
            258usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(isv_svn)
            )
        );
    }
    test_field_isv_svn();
    fn test_field_config_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).config_svn) as usize - ptr as usize
            },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(config_svn)
            )
        );
    }
    test_field_config_svn();
    fn test_field_reserved4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved4) as usize - ptr as usize
            },
            262usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(reserved4)
            )
        );
    }
    test_field_reserved4();
    fn test_field_isv_family_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_family_id) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(isv_family_id)
            )
        );
    }
    test_field_isv_family_id();
    fn test_field_report_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_body_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).report_data) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_body_t),
                "::",
                stringify!(report_data)
            )
        );
    }
    test_field_report_data();
}
pub type sgx_report_body_t = _report_body_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _report_t {
    pub body: sgx_report_body_t,
    pub key_id: sgx_key_id_t,
    pub mac: sgx_mac_t,
}
#[test]
fn bindgen_test_layout__report_t() {
    assert_eq!(
        ::std::mem::size_of::<_report_t>(),
        432usize,
        concat!("Size of: ", stringify!(_report_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_report_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_report_t))
    );
    fn test_field_body() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_t),
                "::",
                stringify!(body)
            )
        );
    }
    test_field_body();
    fn test_field_key_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_id) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_t),
                "::",
                stringify!(key_id)
            )
        );
    }
    test_field_key_id();
    fn test_field_mac() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_report_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mac) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(_report_t),
                "::",
                stringify!(mac)
            )
        );
    }
    test_field_mac();
}
pub type sgx_report_t = _report_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _target_info_t {
    pub mr_enclave: sgx_measurement_t,
    pub attributes: sgx_attributes_t,
    pub reserved1: [u8; 2usize],
    pub config_svn: sgx_config_svn_t,
    pub misc_select: sgx_misc_select_t,
    pub reserved2: [u8; 8usize],
    pub config_id: sgx_config_id_t,
    pub reserved3: [u8; 384usize],
}
#[test]
fn bindgen_test_layout__target_info_t() {
    assert_eq!(
        ::std::mem::size_of::<_target_info_t>(),
        512usize,
        concat!("Size of: ", stringify!(_target_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_target_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_target_info_t))
    );
    fn test_field_mr_enclave() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_target_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mr_enclave) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_target_info_t),
                "::",
                stringify!(mr_enclave)
            )
        );
    }
    test_field_mr_enclave();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_target_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_target_info_t),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_target_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_target_info_t),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_config_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_target_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).config_svn) as usize - ptr as usize
            },
            50usize,
            concat!(
                "Offset of field: ",
                stringify!(_target_info_t),
                "::",
                stringify!(config_svn)
            )
        );
    }
    test_field_config_svn();
    fn test_field_misc_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_target_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).misc_select) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(_target_info_t),
                "::",
                stringify!(misc_select)
            )
        );
    }
    test_field_misc_select();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_target_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_target_info_t),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_config_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_target_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).config_id) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_target_info_t),
                "::",
                stringify!(config_id)
            )
        );
    }
    test_field_config_id();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_target_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_target_info_t),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
}
pub type sgx_target_info_t = _target_info_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _key_request_t {
    pub key_name: u16,
    pub key_policy: u16,
    pub isv_svn: sgx_isv_svn_t,
    pub reserved1: u16,
    pub cpu_svn: sgx_cpu_svn_t,
    pub attribute_mask: sgx_attributes_t,
    pub key_id: sgx_key_id_t,
    pub misc_mask: sgx_misc_select_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved2: [u8; 434usize],
}
#[test]
fn bindgen_test_layout__key_request_t() {
    assert_eq!(
        ::std::mem::size_of::<_key_request_t>(),
        512usize,
        concat!("Size of: ", stringify!(_key_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_key_request_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_key_request_t))
    );
    fn test_field_key_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(key_name)
            )
        );
    }
    test_field_key_name();
    fn test_field_key_policy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_policy) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(key_policy)
            )
        );
    }
    test_field_key_policy();
    fn test_field_isv_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).isv_svn) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(isv_svn)
            )
        );
    }
    test_field_isv_svn();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_cpu_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_svn) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(cpu_svn)
            )
        );
    }
    test_field_cpu_svn();
    fn test_field_attribute_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attribute_mask) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(attribute_mask)
            )
        );
    }
    test_field_attribute_mask();
    fn test_field_key_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_id) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(key_id)
            )
        );
    }
    test_field_key_id();
    fn test_field_misc_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).misc_mask) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(misc_mask)
            )
        );
    }
    test_field_misc_mask();
    fn test_field_config_svn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).config_svn) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(config_svn)
            )
        );
    }
    test_field_config_svn();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_key_request_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            78usize,
            concat!(
                "Offset of field: ",
                stringify!(_key_request_t),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
}
pub type sgx_key_request_t = _key_request_t;
pub type sgx_key_128bit_t = [u8; 16usize];
extern "C" {
    #[doc = " \\brief Low-level wrapper around EREPORT instruction leaf."]
    #[doc = ""]
    #[doc = " Caller is responsible for parameter alignment: 512B for `targetinfo`, 128B for `reportdata`,"]
    #[doc = " and 512B for `report`."]
    pub fn sgx_report(
        targetinfo: *const sgx_target_info_t,
        reportdata: *const sgx_report_data_t,
        report: *mut sgx_report_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\brief Low-level wrapper around EGETKEY instruction leaf."]
    #[doc = ""]
    #[doc = " Caller is responsible for parameter alignment: 512B for `keyrequest` and 16B for `key`."]
    pub fn sgx_getkey(keyrequest: *mut sgx_key_request_t, key: *mut sgx_key_128bit_t) -> i64;
}

#[cfg(all(target_arch = "x86_64", not(target_os = "macos")))]
core::arch::global_asm!(include_str!("enclave_api.S"));

#[cfg(any(not(target_arch = "x86_64"), target_os = "macos"))]
const _: () = {
    #[no_mangle]
    extern "C" fn sgx_getkey(
        _keyrequest: *mut sgx_key_request_t,
        _key: *mut sgx_key_128bit_t,
    ) -> i64 {
        -1
    }
    #[no_mangle]
    extern "C" fn sgx_report(
        _targetinfo: *const sgx_target_info_t,
        _reportdata: *const sgx_report_data_t,
        _report: *mut sgx_report_t,
    ) -> ::std::os::raw::c_int {
        -1
    }
};

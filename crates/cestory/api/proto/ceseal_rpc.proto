
syntax = "proto3";

import "google/protobuf/empty.proto";

package ceseal_rpc;

// The Ceseal service definition.
service CesealApi {
  // Get basic information about Ceseal state.
  rpc GetInfo (google.protobuf.Empty) returns (CesealInfo) {}

  // Sync the parent chain header
  rpc SyncHeader (HeadersToSync) returns (SyncedTo) {}

  // Dispatch blocks (Sync storage changes)
  rpc DispatchBlocks (Blocks) returns (SyncedTo) {}

  // Init the Ceseal runtime
  rpc InitRuntime (InitRuntimeRequest) returns (InitRuntimeResponse) {}

  // Get the cached Ceseal runtime init response
  rpc GetRuntimeInfo (GetRuntimeInfoRequest) returns (InitRuntimeResponse) {}

  // Get pending egress messages
  rpc GetEgressMessages (google.protobuf.Empty) returns (GetEgressMessagesResponse) {}

  // Init the endpoint
  rpc SetEndpoint (SetEndpointRequest) returns (GetEndpointResponse) {}

  // Refresh the endpoint signing time
  rpc RefreshEndpointSigningTime (google.protobuf.Empty) returns (GetEndpointResponse) {}

  // Get endpoint info
  rpc GetEndpointInfo (google.protobuf.Empty) returns (GetEndpointResponse) {}

  // A echo rpc to measure network RTT.
  rpc Echo (EchoMessage) returns (EchoMessage) {}

  // Key Handover Server: Get challenge for worker key handover from another ceSeal
  rpc HandoverCreateChallenge (google.protobuf.Empty) returns (HandoverChallenge) {}

  // Key Handover Server: Get worker key with RA report on challenge from another ceSeal
  rpc HandoverStart (HandoverChallengeResponse) returns (HandoverWorkerKey) {}

  // Key Handover Client: Process HandoverChallenge and return RA report
  rpc HandoverAcceptChallenge (HandoverChallenge) returns (HandoverChallengeResponse) {}

  // Key Handover Client: Receive encrypted worker key
  rpc HandoverReceive (HandoverWorkerKey) returns (google.protobuf.Empty) {}

  // Load given chain state into the ceseal
  rpc LoadChainState (ChainState) returns (google.protobuf.Empty) {}

  // Stop and optionally remove checkpoints
  rpc Stop (StopOptions) returns (google.protobuf.Empty) {}

  // Partially load values into the ceseal's chain storage.
  rpc LoadStorageProof (StorageProof) returns (google.protobuf.Empty) {}

  // Take checkpoint. Returns the current block number of the saved state.
  rpc TakeCheckpoint (google.protobuf.Empty) returns (SyncedTo) {}
}

// Basic information about a Ceseal instance.
message CesealInfo {
  // Whether the init_runtime has been called successfully.
  bool initialized = 1;
  // Genesis block header hash passed in by init_runtime.
  optional string genesis_block_hash = 2;
  // The chain header number synchronized to.
  uint32 headernum = 3;
  // The changes block number synchronized to.
  uint32 blocknum = 4;
  // Current chain storage's state root.
  string state_root = 5;
  // Whether the worker is running in dev mode.
  bool dev_mode = 6;
  // The number of mq messages in the egress queue.
  uint64 pending_messages = 7;
  // The App version
  string version = 9;
  // The git commit hash which this binary was built from
  string git_revision = 10;
  // The heap memory usage of the enclave.
  MemoryUsage memory_usage = 11;
  // System info
  SystemInfo system = 12;
  // Whether the ceseal support to load state from arbitrary block.
  bool can_load_chain_state = 13;
  // Safe mode level
  uint32 safe_mode_level = 14;
  // The timestamp of current block in milliseconds.
  uint64 current_block_time = 15;
}

// Basic information for the initialized runtime
message SystemInfo {
  // Whether the worker has been registered on-chain.
  bool registered = 1;
  // Public key of the worker.
  string public_key = 2;
  // ECDH public key of the worker.
  string ecdh_public_key = 3;
  // Status of keyfairy
  KeyfairyStatus keyfairy = 4;
  // The block that the ceseal loaded the genesis state from.
  uint32 genesis_block = 5;
}

enum KeyfairyRole {
  None = 0;
  Dummy = 1;
  Active = 2;
}

message KeyfairyStatus {
  // The Keyfairy role of the worker.
  KeyfairyRole role = 1;
  // The master public key, empty if not a Keyfairy
  string master_public_key = 2;
}

message MemoryUsage {
  // The current heap usage of Rust codes.
  uint64 rust_used = 1;
  // The peak heap usage of Rust codes.
  uint64 rust_peak_used = 2;
  // The entire peak heap memory usage of the enclave.
  uint64 total_peak_used = 3;
  // The memory left.
  uint64 free = 4;
  // The peak heap usage of Rust codes in a recent short-term.
  uint64 rust_spike = 5;
}

// Response to SyncHeader & SyncParaHeader.
message SyncedTo {
  // The final actual block number synced to.
  uint32 synced_to = 1;
}

// Request parameters for SyncHeader.
message HeadersToSync {
  // The relaychain headers to be synced.
  // @codec scale crate::blocks::HeadersToSync
  bytes encoded_headers = 1;
  // @codec scale crate::blocks::AuthoritySetChange
  optional bytes encoded_authority_set_change = 2;
}

// Request parameters for DispatchBlocks.
message Blocks {
  // The blocks to be synced.
  // @codec scale Vec<crate::blocks::BlockHeaderWithChanges>
  bytes encoded_blocks = 1;
}

// Request parameters for InitRuntime.
message InitRuntimeRequest {
  // Retired
  // Skip the remote attestation report.
  bool skip_ra = 1;
  // Genesis block infomation for light validation.
  // @codec scale crate::blocks::GenesisBlockInfo
  bytes encoded_genesis_info = 2;
  // Worker identity key for dev mode.
  optional bytes debug_set_key = 3;
  // The parachain's genesis storage state.
  // @codec scale crate::blocks::StorageState
  bytes encoded_genesis_state = 4;
  // The operator of of this worker, which has the permission to bind it's miner.
  // @codec scale chain::AccountId
  optional bytes encoded_operator = 5;
  // Attestation provider;
  // @codec scale ces_types::AttestationProvider
  optional bytes attestation_provider = 6;
}

// Request parameters for GetRuntimeInfo.
message GetRuntimeInfoRequest {
  // Force to refresh the RA report.
  bool force_refresh_ra = 1;
  // Reset the operator of of this worker.
  // @codec scale chain::AccountId
  optional bytes encoded_operator = 2;
}

message InitRuntimeResponse {
  // @codec scale ces_types::WorkerRegistrationInfo<chain::AccountId>
  bytes encoded_runtime_info = 1;
  // The hash of the first synced relaychain header.
  // @codec scale chain::Hash
  bytes encoded_genesis_block_hash = 2;
  // The worker's public key.
  // @codec scale ces_types::WorkerPublicKey
  bytes encoded_public_key = 3;
  // @codec scale ces_types::EcdhPublicKey
  bytes encoded_ecdh_public_key = 4;
  // The sgx attestation
  optional Attestation attestation = 5;
}

message Attestation {
  int32 version = 1;
  string provider = 2;
  AttestationReport payload = 3; // Retired
  bytes encoded_report = 5;
  uint64 timestamp = 4;
}

// Retired
message AttestationReport {
  string report = 1;
  bytes signature = 2;
  bytes signing_cert = 3;
}

// Response for GetEgressMessages
message GetEgressMessagesResponse {
  // @codec scale EgressMessages
  bytes encoded_messages = 1;
}

message Signature {
  // The certificate of the signer
  Certificate signed_by = 1;
  // The signature type
  SignatureType signature_type = 2;
  // The signature of the data
  bytes signature = 3;
}

message Certificate {
  // The body of the certificate
  // @codec scale crate::crypto::CertificateBody
  bytes encoded_body = 1;
  // An optinal signature of the body signed by a parent certificate.
  // @boxed
  Signature signature = 2;
}

// Supported signature types.
//
// Each signature type also has its corresponding "WrapBytes" version as defined in Polkadot.js:
//   https://github.com/polkadot-js/extension/blob/e4ce268b1cad5e39e75a2195e3aa6d0344de7745/packages/extension-dapp/src/wrapBytes.ts
// In wrapped version, the message will have tags wrapped around the actual message
// (`<Bytes>{msg}</Bytes>`). This was introduced in Polkadot.js to reduce the risk it's abused to
// sign regular transaction. However, we have to support it as well because it's the only message
// format the Polkadot.js Extension can sign.
enum SignatureType {
  Ed25519 = 0;
  Sr25519 = 1;
  Ecdsa = 2;
  Ed25519WrapBytes = 3;
  Sr25519WrapBytes = 4;
  EcdsaWrapBytes = 5;
  // Eip712 = 6;
}

message HandoverChallenge {
  // @codec scale ces_types::HandoverChallenge<chain::BlockNumber>
  bytes encoded_challenge = 1;
}

message HandoverChallengeResponse {
  // @codec scale ces_types::ChallengeHandlerInfo<chain::BlockNumber>
  bytes encoded_challenge_handler = 1;
  // The sgx attestation on the challenge handler hash
  Attestation attestation = 2;
}

message HandoverWorkerKey {
  // @codec scale ces_types::EncryptedWorkerKey
  bytes encoded_worker_key = 1;
  // The sgx attestation on the encrypted worker key hash
  Attestation attestation = 2;
}

message EchoMessage {
  bytes echo_msg = 1;
}

message SetEndpointRequest {
  string endpoint = 1;
}

message GetEndpointResponse {
  // @codec scale ces_types::WorkerEndpointPayload
  optional bytes encoded_endpoint_payload = 1;
  optional bytes signature = 2;
}

message ChainState {
  uint32 block_number = 1;
  // @codec scale crate::blocks::StorageState
  bytes encoded_state = 2;
}

message StopOptions {
  // Remove checkpoints before stop
  bool remove_checkpoints = 1;
}

message StorageProof {
  repeated bytes proof = 1;
}


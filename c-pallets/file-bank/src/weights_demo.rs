// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_file_bank
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("cess-initial-testnet"), DB CACHE: 1024

// Executed Command:
// ./target/release/cess-node
// benchmark
// pallet
// --chain
// cess-initial-testnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_file_bank
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./c-pallets/file-bank/src/weights_demo.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_file_bank.
pub trait WeightInfo {
	fn generate_restoral_order() -> Weight;
	fn claim_restoral_order() -> Weight;
	fn restoral_order_complete() -> Weight;
	fn claim_restoral_noexist_order() -> Weight;
}

/// Weights for pallet_file_bank using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: FileBank RestoralOrder (r:1 w:1)
	// Storage: FileBank File (r:1 w:1)
	fn generate_restoral_order() -> Weight {
		(97_296_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Sminer MinerItems (r:1 w:0)
	// Storage: FileBank RestoralOrder (r:1 w:1)
	fn claim_restoral_order() -> Weight {
		(74_032_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Sminer MinerItems (r:2 w:2)
	// Storage: FileBank RestoralOrder (r:1 w:1)
	// Storage: FileBank File (r:1 w:1)
	// Storage: FileBank PendingReplacements (r:1 w:1)
	// Storage: Sminer RestoralTarget (r:1 w:0)
	fn restoral_order_complete() -> Weight {
		(195_002_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Sminer MinerItems (r:1 w:0)
	// Storage: FileBank RestoralOrder (r:1 w:1)
	// Storage: Sminer RestoralTarget (r:1 w:0)
	// Storage: FileBank File (r:1 w:1)
	fn claim_restoral_noexist_order() -> Weight {
		(118_736_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: FileBank RestoralOrder (r:1 w:1)
	// Storage: FileBank File (r:1 w:1)
	fn generate_restoral_order() -> Weight {
		(97_296_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Sminer MinerItems (r:1 w:0)
	// Storage: FileBank RestoralOrder (r:1 w:1)
	fn claim_restoral_order() -> Weight {
		(74_032_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Sminer MinerItems (r:2 w:2)
	// Storage: FileBank RestoralOrder (r:1 w:1)
	// Storage: FileBank File (r:1 w:1)
	// Storage: FileBank PendingReplacements (r:1 w:1)
	// Storage: Sminer RestoralTarget (r:1 w:0)
	fn restoral_order_complete() -> Weight {
		(195_002_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Sminer MinerItems (r:1 w:0)
	// Storage: FileBank RestoralOrder (r:1 w:1)
	// Storage: Sminer RestoralTarget (r:1 w:0)
	// Storage: FileBank File (r:1 w:1)
	fn claim_restoral_noexist_order() -> Weight {
		(118_736_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
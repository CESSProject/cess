// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_file_bank
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("cess-hacknet"), DB CACHE: 128

// Executed Command:

// D:\workspace\substrate\internal-cess-node\target\release\cess-node.exe

// benchmark

// --chain

// cess-hacknet

// --execution=wasm

// --wasm-execution=compiled

// --pallet

// pallet_file_bank

// --extrinsic

// *

// --steps

// 50

// --repeat

// 20

// --template=./.maintain/frame-weight-template.hbs

// --output=./c-pallets/file-bank/src/weights.rs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_file_bank.
pub trait WeightInfo {
	
	fn upload() -> Weight;
	
	fn update() -> Weight;
	
}

/// Weights for pallet_file_bank using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {

	
	
	// Storage: FileBank UserFileSize (r:1 w:1)
	
	// Storage: FileBank File (r:0 w:1)
	
	// Storage: FileBank Invoice (r:0 w:1)
	
	fn upload() -> Weight {
		(38_500_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			
			
	}
	
	
	// Storage: FileBank File (r:1 w:1)
	
	fn update() -> Weight {
		(35_000_000 as Weight)
			
			
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			
			
	}
	
}

// For backwards compatibility and tests
impl WeightInfo for () {
	
	
	// Storage: FileBank UserFileSize (r:1 w:1)
	
	// Storage: FileBank File (r:0 w:1)
	
	// Storage: FileBank Invoice (r:0 w:1)
	
	fn upload() -> Weight {
		(38_500_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			
			
	}
	
	
	// Storage: FileBank File (r:1 w:1)
	
	fn update() -> Weight {
		(35_000_000 as Weight)
			
			
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			
			
			
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			
			
	}
	
}

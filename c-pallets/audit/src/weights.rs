
//! Autogenerated weights for pallet_audit
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu`, CPU: `Intel(R) Core(TM) i5-10400 CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("cess-initial-devnet"), DB CACHE: 1024

// Executed Command:
// ./target/release/cess-node
// benchmark
// pallet
// --chain
// cess-initial-devnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_audit
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./c-pallets/audit/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_audit.
pub trait WeightInfo {
	fn submit_idle_proof() -> Weight;
	fn submit_service_proof() -> Weight;
	fn submit_verify_idle_result() -> Weight;
	fn submit_verify_service_result() -> Weight;
}

/// Weights for pallet_audit using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Audit ChallengeSnapShot (r:1 w:1)
	// Storage: TeeWorker TeeWorkerMap (r:2 w:0)
	// Storage: Babe AuthorVrfRandomness (r:1 w:0)
	// Storage: Audit UnverifyIdleProof (r:1 w:1)
	fn submit_idle_proof() -> Weight {
		// Minimum execution time: 124_658 nanoseconds.
		Weight::from_ref_time(131_390_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Audit ChallengeSnapShot (r:1 w:1)
	// Storage: TeeWorker TeeWorkerMap (r:2 w:0)
	// Storage: Babe AuthorVrfRandomness (r:1 w:0)
	// Storage: Audit UnverifyServiceProof (r:1 w:1)
	fn submit_service_proof() -> Weight {
		// Minimum execution time: 127_080 nanoseconds.
		Weight::from_ref_time(132_384_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Audit UnverifyIdleProof (r:1 w:1)
	// Storage: Audit ChallengeSnapShot (r:1 w:0)
	// Storage: TeeWorker TeePodr2Pk (r:1 w:0)
	// Storage: Audit VerifyResult (r:1 w:1)
	// Storage: Sminer RewardMap (r:1 w:1)
	// Storage: Sminer CurrencyReward (r:1 w:1)
	// Storage: SchedulerCredit CurrentCounters (r:1 w:1)
	// Storage: Audit CountedIdleFailed (r:0 w:1)
	fn submit_verify_idle_result() -> Weight {
		// Minimum execution time: 1_495_812 nanoseconds.
		Weight::from_ref_time(1_517_527_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Audit UnverifyServiceProof (r:1 w:1)
	// Storage: Audit ChallengeSnapShot (r:1 w:0)
	// Storage: TeeWorker TeePodr2Pk (r:1 w:0)
	// Storage: Audit VerifyResult (r:1 w:1)
	// Storage: Sminer RewardMap (r:1 w:1)
	// Storage: Sminer CurrencyReward (r:1 w:1)
	// Storage: SchedulerCredit CurrentCounters (r:1 w:1)
	// Storage: Audit CountedIdleFailed (r:0 w:1)
	fn submit_verify_service_result() -> Weight {
		// Minimum execution time: 1_521_687 nanoseconds.
		Weight::from_ref_time(1_549_366_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Audit ChallengeSnapShot (r:1 w:1)
	// Storage: TeeWorker TeeWorkerMap (r:2 w:0)
	// Storage: Babe AuthorVrfRandomness (r:1 w:0)
	// Storage: Audit UnverifyIdleProof (r:1 w:1)
	fn submit_idle_proof() -> Weight {
		// Minimum execution time: 124_658 nanoseconds.
		Weight::from_ref_time(131_390_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Audit ChallengeSnapShot (r:1 w:1)
	// Storage: TeeWorker TeeWorkerMap (r:2 w:0)
	// Storage: Babe AuthorVrfRandomness (r:1 w:0)
	// Storage: Audit UnverifyServiceProof (r:1 w:1)
	fn submit_service_proof() -> Weight {
		// Minimum execution time: 127_080 nanoseconds.
		Weight::from_ref_time(132_384_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Audit UnverifyIdleProof (r:1 w:1)
	// Storage: Audit ChallengeSnapShot (r:1 w:0)
	// Storage: TeeWorker TeePodr2Pk (r:1 w:0)
	// Storage: Audit VerifyResult (r:1 w:1)
	// Storage: Sminer RewardMap (r:1 w:1)
	// Storage: Sminer CurrencyReward (r:1 w:1)
	// Storage: SchedulerCredit CurrentCounters (r:1 w:1)
	// Storage: Audit CountedIdleFailed (r:0 w:1)
	fn submit_verify_idle_result() -> Weight {
		// Minimum execution time: 1_495_812 nanoseconds.
		Weight::from_ref_time(1_517_527_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Audit UnverifyServiceProof (r:1 w:1)
	// Storage: Audit ChallengeSnapShot (r:1 w:0)
	// Storage: TeeWorker TeePodr2Pk (r:1 w:0)
	// Storage: Audit VerifyResult (r:1 w:1)
	// Storage: Sminer RewardMap (r:1 w:1)
	// Storage: Sminer CurrencyReward (r:1 w:1)
	// Storage: SchedulerCredit CurrentCounters (r:1 w:1)
	// Storage: Audit CountedIdleFailed (r:0 w:1)
	fn submit_verify_service_result() -> Weight {
		// Minimum execution time: 1_521_687 nanoseconds.
		Weight::from_ref_time(1_549_366_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
}

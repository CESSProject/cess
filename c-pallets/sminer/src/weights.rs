// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_sminer
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("cess-staking-testnet"), DB CACHE: 1024

// Executed Command:
// ./target/release/cess-node
// benchmark
// --chain
// cess-staking-testnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_sminer
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./c-pallets/sminer/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_sminer.
pub trait WeightInfo {
	fn regnstk() -> Weight;
	fn increase_collateral() -> Weight;
	fn update_beneficiary() -> Weight;
	fn update_ip() -> Weight;
	fn exit_miner() -> Weight;
	fn withdraw() -> Weight;
	fn timed_increase_rewards() -> Weight;
	fn timed_task_award_table(v: u32, ) -> Weight;
	fn timed_user_receive_award1(v: u32, ) -> Weight;
	fn timing_task_increase_power_rewards() -> Weight;
	fn timing_task_award_table() -> Weight;
	fn timing_user_receive_award() -> Weight;
}

/// Weights for pallet_sminer using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Sminer PeerIndex (r:1 w:1)
	// Storage: Sminer AllMiner (r:1 w:1)
	fn regnstk() -> Weight {
		Weight::from_ref_time(62_798_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn increase_collateral() -> Weight {
		Weight::from_ref_time(58_597_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn update_beneficiary() -> Weight {
		Weight::from_ref_time(41_298_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn update_ip() -> Weight {
		Weight::from_ref_time(42_699_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: Sminer TotalServiceSpace (r:1 w:1)
	// Storage: Sminer TotalIdleSpace (r:1 w:1)
	// Storage: Sminer MinerLockIn (r:0 w:1)
	fn exit_miner() -> Weight {
		Weight::from_ref_time(66_298_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: Sminer MinerLockIn (r:1 w:1)
	// Storage: Sminer TotalIdleSpace (r:1 w:1)
	// Storage: Sminer TotalServiceSpace (r:1 w:1)
	// Storage: Sminer AllMiner (r:1 w:1)
	// Storage: Sminer BadMiner (r:0 w:1)
	fn withdraw() -> Weight {
		Weight::from_ref_time(85_296_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: Sminer TotalIdleSpace (r:1 w:0)
	// Storage: Sminer TotalServiceSpace (r:1 w:0)
	// Storage: Sminer CurrencyReward (r:1 w:1)
	// Storage: Sminer MinerItems (r:2 w:0)
	// Storage: Sminer CalculateRewardOrderMap (r:1 w:1)
	// Storage: Sminer CounterForCalculateRewardOrderMap (r:1 w:1)
	fn timed_increase_rewards() -> Weight {
		Weight::from_ref_time(68_497_000 as u64)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Sminer CalculateRewardOrderMap (r:2 w:0)
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: Sminer RewardClaimMap (r:1 w:1)
	// Storage: Sminer CounterForRewardClaimMap (r:1 w:1)
	fn timed_task_award_table(v: u32, ) -> Weight {
		Weight::from_ref_time(30_507_000 as u64)
			// Standard Error: 122_000
			.saturating_add(Weight::from_ref_time(31_887_000 as u64).saturating_mul(v as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(v as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(v as u64)))
	}
	// Storage: Sminer RewardClaimMap (r:2 w:1)
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn timed_user_receive_award1(v: u32, ) -> Weight {
		Weight::from_ref_time(20_872_000 as u64)
			// Standard Error: 129_000
			.saturating_add(Weight::from_ref_time(47_205_000 as u64).saturating_mul(v as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(v as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(v as u64)))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn timing_task_increase_power_rewards() -> Weight {
		Weight::from_ref_time(43_398_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn timing_task_award_table() -> Weight {
		Weight::from_ref_time(43_099_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn timing_user_receive_award() -> Weight {
		Weight::from_ref_time(43_399_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Sminer PeerIndex (r:1 w:1)
	// Storage: Sminer AllMiner (r:1 w:1)
	fn regnstk() -> Weight {
		Weight::from_ref_time(62_798_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn increase_collateral() -> Weight {
		Weight::from_ref_time(58_597_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn update_beneficiary() -> Weight {
		Weight::from_ref_time(41_298_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn update_ip() -> Weight {
		Weight::from_ref_time(42_699_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: Sminer TotalServiceSpace (r:1 w:1)
	// Storage: Sminer TotalIdleSpace (r:1 w:1)
	// Storage: Sminer MinerLockIn (r:0 w:1)
	fn exit_miner() -> Weight {
		Weight::from_ref_time(66_298_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: Sminer MinerLockIn (r:1 w:1)
	// Storage: Sminer TotalIdleSpace (r:1 w:1)
	// Storage: Sminer TotalServiceSpace (r:1 w:1)
	// Storage: Sminer AllMiner (r:1 w:1)
	// Storage: Sminer BadMiner (r:0 w:1)
	fn withdraw() -> Weight {
		Weight::from_ref_time(85_296_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: Sminer TotalIdleSpace (r:1 w:0)
	// Storage: Sminer TotalServiceSpace (r:1 w:0)
	// Storage: Sminer CurrencyReward (r:1 w:1)
	// Storage: Sminer MinerItems (r:2 w:0)
	// Storage: Sminer CalculateRewardOrderMap (r:1 w:1)
	// Storage: Sminer CounterForCalculateRewardOrderMap (r:1 w:1)
	fn timed_increase_rewards() -> Weight {
		Weight::from_ref_time(68_497_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Sminer CalculateRewardOrderMap (r:2 w:0)
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: Sminer RewardClaimMap (r:1 w:1)
	// Storage: Sminer CounterForRewardClaimMap (r:1 w:1)
	fn timed_task_award_table(v: u32, ) -> Weight {
		Weight::from_ref_time(30_507_000 as u64)
			// Standard Error: 122_000
			.saturating_add(Weight::from_ref_time(31_887_000 as u64).saturating_mul(v as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().reads((3 as u64).saturating_mul(v as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(v as u64)))
	}
	// Storage: Sminer RewardClaimMap (r:2 w:1)
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn timed_user_receive_award1(v: u32, ) -> Weight {
		Weight::from_ref_time(20_872_000 as u64)
			// Standard Error: 129_000
			.saturating_add(Weight::from_ref_time(47_205_000 as u64).saturating_mul(v as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(v as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(v as u64)))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn timing_task_increase_power_rewards() -> Weight {
		Weight::from_ref_time(43_398_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn timing_task_award_table() -> Weight {
		Weight::from_ref_time(43_099_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn timing_user_receive_award() -> Weight {
		Weight::from_ref_time(43_399_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
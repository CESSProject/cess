
//! Autogenerated weights for pallet_sminer
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ubuntu`, CPU: `Intel(R) Core(TM) i5-10400 CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("cess-initial-devnet"), DB CACHE: 1024

// Executed Command:
// ./target/release/cess-node
// benchmark
// pallet
// --chain
// cess-initial-devnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_sminer
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./c-pallets/sminer/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_sminer.
pub trait WeightInfo {
	fn regnstk() -> Weight;
	fn increase_collateral() -> Weight;
	fn update_beneficiary() -> Weight;
	fn update_peer_id() -> Weight;
	fn faucet_top_up() -> Weight;
	fn miner_exit_prep() -> Weight;
	fn miner_exit() -> Weight;
	fn miner_withdraw() -> Weight;
}

/// Weights for pallet_sminer using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: TeeWorker TeePodr2Pk (r:1 w:0)
	// Storage: Sminer CounterForMinerItems (r:1 w:1)
	// Storage: Sminer AllMiner (r:1 w:1)
	// Storage: Sminer RewardMap (r:0 w:1)
	// Storage: Sminer MinerPublicKey (r:0 w:1)
	fn regnstk() -> Weight {
		// Minimum execution time: 1_549_086 nanoseconds.
		Weight::from_parts(1_641_778_000, 0)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn increase_collateral() -> Weight {
		// Minimum execution time: 75_685 nanoseconds.
		Weight::from_parts(77_185_000, 0)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn update_beneficiary() -> Weight {
		// Minimum execution time: 56_771 nanoseconds.
		Weight::from_parts(60_287_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn update_peer_id() -> Weight {
		// Minimum execution time: 57_187 nanoseconds.
		Weight::from_parts(61_289_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: System Account (r:1 w:1)
	fn faucet_top_up() -> Weight {
		// Minimum execution time: 75_384 nanoseconds.
		Weight::from_parts(79_388_000, 0)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Sminer MinerLock (r:1 w:1)
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn miner_exit_prep() -> Weight {
		// Minimum execution time: 76_791 nanoseconds.
		Weight::from_parts(77_847_000, 0)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: StorageHandler TotalIdleSpace (r:1 w:1)
	// Storage: Sminer RewardMap (r:1 w:1)
	// Storage: Sminer CurrencyReward (r:1 w:1)
	// Storage: Sminer AllMiner (r:1 w:1)
	// Storage: Sminer RestoralTarget (r:0 w:1)
	fn miner_exit() -> Weight {
		// Minimum execution time: 71_523 nanoseconds.
		Weight::from_parts(73_043_000, 0)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Sminer RestoralTarget (r:1 w:0)
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Sminer CounterForMinerItems (r:1 w:1)
	// Storage: Sminer MinerPublicKey (r:0 w:1)
	fn miner_withdraw() -> Weight {
		// Minimum execution time: 84_622 nanoseconds.
		Weight::from_parts(88_092_000, 0)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: TeeWorker TeePodr2Pk (r:1 w:0)
	// Storage: Sminer CounterForMinerItems (r:1 w:1)
	// Storage: Sminer AllMiner (r:1 w:1)
	// Storage: Sminer RewardMap (r:0 w:1)
	// Storage: Sminer MinerPublicKey (r:0 w:1)
	fn regnstk() -> Weight {
		// Minimum execution time: 1_549_086 nanoseconds.
		Weight::from_parts(1_641_778_000, 0)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn increase_collateral() -> Weight {
		// Minimum execution time: 75_685 nanoseconds.
		Weight::from_parts(77_185_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn update_beneficiary() -> Weight {
		// Minimum execution time: 56_771 nanoseconds.
		Weight::from_parts(60_287_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	fn update_peer_id() -> Weight {
		// Minimum execution time: 57_187 nanoseconds.
		Weight::from_parts(61_289_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: System Account (r:1 w:1)
	fn faucet_top_up() -> Weight {
		// Minimum execution time: 75_384 nanoseconds.
		Weight::from_parts(79_388_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Sminer MinerLock (r:1 w:1)
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	fn miner_exit_prep() -> Weight {
		// Minimum execution time: 76_791 nanoseconds.
		Weight::from_parts(77_847_000, 0)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: StorageHandler TotalIdleSpace (r:1 w:1)
	// Storage: Sminer RewardMap (r:1 w:1)
	// Storage: Sminer CurrencyReward (r:1 w:1)
	// Storage: Sminer AllMiner (r:1 w:1)
	// Storage: Sminer RestoralTarget (r:0 w:1)
	fn miner_exit() -> Weight {
		// Minimum execution time: 71_523 nanoseconds.
		Weight::from_parts(73_043_000, 0)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Sminer RestoralTarget (r:1 w:0)
	// Storage: Sminer MinerItems (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Sminer CounterForMinerItems (r:1 w:1)
	// Storage: Sminer MinerPublicKey (r:0 w:1)
	fn miner_withdraw() -> Weight {
		// Minimum execution time: 84_622 nanoseconds.
		Weight::from_parts(88_092_000, 0)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}

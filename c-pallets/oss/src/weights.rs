// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_oss
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("cess-initial-testnet"), DB CACHE: 1024

// Executed Command:
// ./target/release/cess-node
// benchmark
// --chain
// cess-initial-testnet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_oss
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./.maintain/frame-weight-template.hbs
// --output=./c-pallets/oss/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_oss.
pub trait WeightInfo {
	fn authorize() -> Weight;
	fn cancel_authorize() -> Weight;
	fn register() -> Weight;
	fn update() -> Weight;
	fn destroy() -> Weight;
}

/// Weights for pallet_oss using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Oss AuthorityList (r:0 w:1)
	fn authorize() -> Weight {
		Weight::from_parts(31_511_000, 0)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Oss AuthorityList (r:1 w:1)
	fn cancel_authorize() -> Weight {
		Weight::from_parts(22_793_000, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Oss Oss (r:1 w:1)
	fn register() -> Weight {
		Weight::from_parts(21_736_000, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Oss Oss (r:1 w:1)
	fn update() -> Weight {
		Weight::from_parts(23_216_000, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Oss Oss (r:1 w:1)
	fn destroy() -> Weight {
		Weight::from_parts(22_212_000, 0)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Oss AuthorityList (r:0 w:1)
	fn authorize() -> Weight {
		Weight::from_parts(31_511_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Oss AuthorityList (r:1 w:1)
	fn cancel_authorize() -> Weight {
		Weight::from_parts(22_793_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Oss Oss (r:1 w:1)
	fn register() -> Weight {
		Weight::from_parts(21_736_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Oss Oss (r:1 w:1)
	fn update() -> Weight {
		Weight::from_parts(23_216_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Oss Oss (r:1 w:1)
	fn destroy() -> Weight {
		Weight::from_parts(22_212_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}